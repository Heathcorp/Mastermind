// 1 = Sunday
// 7 = Saturday
let count;
let left;
let right;
let iterating = 1;
//Keep looping until we get 2 null characters in a row
while iterating {
  let day = 7;
  // Since days are cyclical we can just loop from 1 to 7 and overflow back to 1
  def iterate<day> {
    if not day - 7 {
      day = 1;
    } else {
      day += 1;
    }
  }
  //Iterate days 1 by 1
  def drain_days<count, day> {
    drain count {
      iterate<day>;
    }
  }
  //Since we know how many days in each month we can skip any multiple of 7 and only do the modulo iteration
  def drain_months<count, day>{
    let iterates;
    // Loop from current month to jan and add that many days skip leap year logic since that is year dependent
    drain count {
      iterates = 0;
      if not count - 12 {
        iterates += 3;
      }
      if not count - 11 {
        iterates += 2;
      }
      if not count - 10 {
        iterates += 3;
      }
      if not count - 9 {
        iterates += 2;
      }
      if not count - 8 {
        iterates += 3;
      }
      if not count - 7 {
        iterates += 3;
      }
      if not count - 6 {
        iterates += 2;
      }
      if not count - 5 {
        iterates += 3;
      }
      if not count - 4 {
        iterates += 2;
      }
      if not count - 3 {
        iterates += 3;
      }
      if not count - 1 {
        iterates += 3;
      }
      drain iterates {
        iterate<day>;
      }
    }
  }

  // This function is the most complex part of the code it is required to handle the leap years
  def drain_years<left, right, day, m2>{
    // Since we know we only run from 1583 to 9999 we can setup our leap year logic from that date
    // We then loop through each year and add 1 day since 365 % 7 = 1 and then any extra leap years
    let hun_years = 4;
    let years = 83;
    let leap = 3;
    left -= 15;
    if left{
      right += 100;
      left -= 1;
    }
    right -= 83;
    left += 1;
    drain left {
      if left - 1 {
        right += 100;
      }
      drain right {
        iterate<day>;
        //Leap year logic add a day every year that is a multiple of 4 unless it is also a multiple of 100
        // but not a multiple of 400
        if not leap - 4 {
          if not years - 100 {
            if not hun_years - 4 {
              iterate<day>;
              hun_years = 0;
            }
            hun_years += 1;
            years = 0;
          } else {
            iterate<day>;
          }
          leap = 0;
        }
        leap += 1;
        years += 1;
      }
    }
    //This logic is here to handle if the current year is a leap year since the above doesn't add the current year
    if m2 - 1 {
      if m2 - 2 {
        if not leap - 4 {
          if not years - 100 {
            if not hun_years - 4 {
              iterate<day>;
            }
          } else {
            iterate<day>;
          }
        }
      }
    }
  }
  //Accept our input
  let y1;
  let y2;
  let y3;
  let y4;
  let m1;
  let m2;
  let d1;
  let d2;
  let waiting = 1;
  //Check if to see if we get a null character and if so skip it and if the next is also null break the loop
  while waiting {
    input y1;
    if y1 {
      waiting = 0;
    } else {
      waiting += 1;
      if not waiting - 3 {
        iterating = 0;
        waiting = 0;
      }
    }
  }
  if iterating {
    // input y1;
    input y2;
    input y3;
    input y4;
    input m1;
    input m1;
    input m2;
    input d1;
    input d1;
    input d2;
    // Convert ASCII Nums into real Nums 0-255
    y1 -= '0';
    y2 -= '0';
    y3 -= '0';
    y4 -= '0';
    m1 -= '0';
    m2 -= '0';
    d1 -= '0';
    d2 -= '0';
    // iterate Day Of The Week For Each Day d1 = 10s and d2 = 1s
    count = d2;
    drain d1 {
      count += 10;
    }
    day -= 1;
    drain_days<count, day>;
    // iterate Day Of The Week For Each Month m1 = 10s and m2 = 1s
    count = m2;
    drain m1 {
      count += 10;
    }
    m2 = count;
    count -= 1;
    drain_months<count, day>;
    // Now iterate through years since 4 places is to big we split left and right so eg 1999 = 19 99
    left = y2;
    right = y4;
    drain y1 {
      left += 10;
    }
    drain y3 {
      right += 10;
    }
    drain_years<left, right, day, m2>;
    //Then output based on the day value
    if not day - 7 {
        output "Saturday";
    }
    if not day - 6 {
        output "Friday";
    }
    if not day - 5 {
        output "Thursday";
    }
    if not day - 4 {
        output "Wednesday";
    }
    if not day - 3 {
        output "Tuesday";
    }
    if not day - 2 {
        output "Monday";
    }
    if not day - 1 {
        output "Sunday";
    }
    output "\n";
  }
}
