// Accepts a brainfuck program as input, then runs it

// frames:
// @0: bf_instr_marker
// @1: bf_instr
// @2: tape_boundary
// @3: tape_head
// @4: tape_value
// @5: tape_value_copy
// @6: 
// @7: 
// @8: 
// @9: 
// @10: loop_count
// @11: loop_reversed
// @12: 
// @13: 
// @14: 
// @15: 

let initial_tape_boundary @2 = 1;
let initial_tape_head @3 = 1;

bf @16 {
  >,[< +>>>>>>>>>>>>>>>> >,]<- <<<<<<<<<<<<<<<<[<<<<<<<<<<<<<<<<]>>>>>>>>>>>>>>>>
  -- // start pc set as -1

  [
    // start by finding the current instruction, marked as -1 in the bf_instr_marker
    [<<<<<<<<<<<<<<<<]+[->>>>>>>>>>>>>>>>+]-
    {
      let bf_instr_marker @0; assert bf_instr_marker equals -1;
      let bf_instr @1; assert bf_instr unknown;
      let tape_boundary @2; assert tape_boundary unknown;
      let tape_head @3; assert tape_head unknown;
      let tape_value @4; assert tape_value unknown;

      let loop_count @10; assert loop_count unknown;
      let loop_reversed @11; assert loop_reversed unknown;

      let right_bf_marker @16; assert right_bf_marker unknown;
      let right_bf_instr @17; assert right_bf_instr unknown;

      {
        // tape value copy should be cleared automatically so we open a new scope
        let tape_value_copy @5;
        // copy current virtual cell value to current frame
        bf @0 {
          >>-[+<<<<<<<<<<<<<<<<-]+ // boundary
          >-[+>>>>>>>>>>>>>>>>-]+ // tape head
          >[->+>+<<]>>[-<<+>>]<
          // now move copied cell value to current frame
          [-
            <<<-[+<<<<<<<<<<<<<<<<-]+ // boundary
            <<+[->>>>>>>>>>>>>>>>+]- // current frame
            >>>>>+
            <<<-[+<<<<<<<<<<<<<<<<-]+ // boundary
            >-[+>>>>>>>>>>>>>>>>-]+ // tape head
            >>
          ]
          // now move back to current frame
          <<<-[+<<<<<<<<<<<<<<<<-]+ // boundary
          <<+[->>>>>>>>>>>>>>>>+]- // current frame
        }
        assert tape_value_copy unknown;
  
        if loop_count {
          // if there is a loop being skipped, we ignore other instructions except loops
          if not bf_instr - '[' {
            loop_count += 1;
          }
          if not bf_instr - ']' {
            loop_count -= 1;
          }
        } else {
          // cell editing
          if not bf_instr - '+' {
            bf @0 {
              >>-[+<<<<<<<<<<<<<<<<-]+ // boundary
              >-[+>>>>>>>>>>>>>>>>-]+ // tape head
              > + <<-[+<<<<<<<<<<<<<<<<-]+ // boundary
              <<+[->>>>>>>>>>>>>>>>+]- // back to the marker
            }
          }
          if not bf_instr - '-' {
            bf @0 {
              >>-[+<<<<<<<<<<<<<<<<-]+
              >-[+>>>>>>>>>>>>>>>>-]+
              > - <<-[+<<<<<<<<<<<<<<<<-]+
              <<+[->>>>>>>>>>>>>>>>+]-
            }
          }
  
          // I/O
          if not bf_instr - '.' {
            bf @0 {
              >>-[+<<<<<<<<<<<<<<<<-]+
              >-[+>>>>>>>>>>>>>>>>-]+
              > . <<-[+<<<<<<<<<<<<<<<<-]+
              <<+[->>>>>>>>>>>>>>>>+]-
            }
          }
          if not bf_instr - ',' {
            bf @0 {
              >>-[+<<<<<<<<<<<<<<<<-]+
              >-[+>>>>>>>>>>>>>>>>-]+
              > , <<-[+<<<<<<<<<<<<<<<<-]+
              <<+[->>>>>>>>>>>>>>>>+]-
            }
          }
    
          // moves
          if not bf_instr - '>' {
            bf @0 {
              >>-[+<<<<<<<<<<<<<<<<-]+ // boundary
              >-[+>>>>>>>>>>>>>>>>-]+ // tape head
              ->>>>>>>>>>>>>>>>+ // new tape head
              <-[+<<<<<<<<<<<<<<<<-]+ // boundary
              <<+[->>>>>>>>>>>>>>>>+]- // back to current frame
            }
          }
          if not bf_instr - '<' {
            bf @0 {
              >>-[+<<<<<<<<<<<<<<<<-]+ // boundary
              >-[+>>>>>>>>>>>>>>>>-]+ // tape head
              -<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>> // move tape head left and come back
              // move boundary if needed:
              <[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>] // old or no boundary
              -[+<<<<<<<<<<<<<<<<-]+ // boundary
              <<+[->>>>>>>>>>>>>>>>+]- // back to current frame
            }
          }
  
          // loops
          if not bf_instr - '[' {
            // if virtual tape cell is zero, skip to corresponding loop
            if not tape_value_copy {
              loop_count += 1;
            }
          }
          if not bf_instr - ']' {
            // if virtual tape cell is non-zero, jump back to corresponding loop
            if tape_value_copy {
              loop_count -= 1;
              loop_reversed = true;
            }
          }
        }
  
        if not loop_count {
          loop_reversed = false;
        }
  
        // move any data required for the next iteration
        bf_instr_marker = 1;
        if loop_reversed {
          // move loop count to left frame
          bf @10 {[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]}
          // move loop reversed value
          bf @11 {-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>}
          // set next pc
          bf @0 {<<<<<<<<<<<<<<<<-->>>>>>>>>>>>>>>>}
        } else {
          // move the loop count to right frame
          bf @10 {[->>>> >>>> >>>> >>>>+<<<< <<<< <<<< <<<<]}
          // set next pc
          if right_bf_instr {
            // continue with the program
            right_bf_marker = -1;
          } else {
            // set the current marker to 0, which will exit the main loop
            bf_instr_marker = 0;
          }
        }
      }
    }
  ]
}
