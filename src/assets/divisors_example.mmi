#include "print.mmi"

let N = 100;
let number = 1;

// a draining loop, loops n times, clearing the variable
drain N into number {
  output "The factors of ";
  print<number>;
  output " are 1";
  
  if number - 1 {

    let num_copy = number - 2;
    let divisor = 2;
    drain num_copy into divisor {
      // currently functions are more like macros
      // there are no arguments-by-values or return values
      let result;
      divisible<result, number, divisor>;

      if result {
        output ", ";
        print<divisor>;
      }
    }

    output " and ";

    print<number>;
  }

  output '\n';
}

def divisible<result, dividend, divisor> {
  // result = 0 if dividend % divisor = 0
  let b = dividend;

  let iterating = true;
  
  while iterating {
    // a copying loop, loops n times without modifying the variable
    copy divisor {
      b -= 1;
      if not b {
        iterating = false;
      }
    }
  }
  // if there is no remainder then we are divisible
  if not b {
    result = true;
  }
}
