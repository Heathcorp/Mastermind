def print<num> {
  let digits[3] = [-1, -1, num];

  // scoping "iterating" to the loop only for memory allocation efficiency
  {
    // find hundreds
    let iterating = true;
    while iterating {
      digits[0] += 1;
      drain (100) {
        if not digits[2] {
          iterating = false;
        }
        digits[2] -= 1;
      }
      if not iterating {
        digits[2] += 100;
      }
    }
  }

  {
    // find tens
    let iterating = true;
    while iterating {
      digits[1] += 1;
      drain 10 {
        if not digits[2] {
          iterating = false;
        }
        digits[2] -= 1;
      }
      if not iterating {
        digits[2] += 10;
      }
    }
  }

  // ones digits are the remainder

  // this is a semi-efficient way of defining chars[3] = "000"
  let chars[3];
  // equivalent to [>+>+>+<<<-]
  drain '0' into *chars;

  // uncomment this and you will see what I mean
  // output *chars;

  if digits[0] {
    drain digits[0] into chars[0];
    output chars[0];
    drain digits[1] into chars[1];
    output chars[1];
  }
  if digits[1] {
    drain digits[1] into chars[1];
    output chars[1];
  }
  drain digits[2] into chars[2];
  output chars[2];
}
